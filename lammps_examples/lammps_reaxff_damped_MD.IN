# 
#          NVT damped MD simulation using the ReaxFF potential
#
#                     Kenny Jolley  June 2020

# 2 Simulation blocks:
#   - Initial NVT thermalisation of the system at high temperature 
#   - Quench the system using damped MD

# Requires:
#  ffield
#  lattice file with the mass defined

# -----------------------------------
#  Configurable variables
# -----------------------------------

variable input_file   string  'lammps.lattice.dat'    #  Input filename of the lattice

variable high_temp    equal   100       #  Initial System temperature [K] 
variable init_eq_time equal    1.0      #  Initial Equilibration time [ps]

variable damped_md_time equal   10.0   #  Time to damp system with damped MD [ps]

variable output_freq  equal    0.1       #  Output period of data in log files [ps]
variable dump_freq    equal    1.0       #  Output frequency of dump files containing atom coordinates [ps]

variable restrict_2D  equal    false       #  Forces in Z are fixed to zero, atoms don't get initial displacements in Z. (True/False)

# Should NOT need to change these variables

variable sim_timestep equal     0.0005  #  Timestep to use in the MD simulations [ps]
variable random_seed  equal      52253  #  Seed of the random number generator

# -----------------------------------
#  Simulation commands
# -----------------------------------

#
# ReaxFF potential settings
#

dimension       3
boundary        p p p 
units           real

atom_style  charge
read_data       ${input_file}

# pair_style  reax/c NULL
# pair_coeff  * * ffield C

pair_style hybrid/overlay reax/c NULL  zbl 1.0 1.15
pair_coeff * * reax/c ffield C
pair_coeff * * zbl 6.0 6.0

neighbor       2. bin
neigh_modify   every 10 delay 0 check no
fix            99 all qeq/reax 1 0.0 10.0 1e-6 reax/c


#
# Initial NVT equilibration
#
print " "
print "-----------------------------------"
print "  Begin Initial NVT equilibration"
print "-----------------------------------"
print " "

print "Thermalising at ${high_temp} K"
print "Thermalisation time ${init_eq_time} ps"

# NVT fix
fix      1  all nvt temp ${high_temp} ${high_temp} 50.0

# Set timestep
variable reaxff_sim_timestep equal (${sim_timestep}*1000.0)
timestep ${reaxff_sim_timestep}

variable num_timesteps equal  ${init_eq_time}/${sim_timestep}

print "Equilibration timesteps required = ${num_timesteps} "
print " "

# Print box info
variable Length_x equal (lx/10)
variable Length_y equal (ly/10)
variable Length_z equal (lz/10)
print "-- Fixed box --"
print "Box length x: ${Length_x} nm"
print "Box length y: ${Length_y} nm"
print "Box length z: ${Length_z} nm"
variable myvol equal (vol/1000)
print "Box volume  : ${myvol} nm^3"
variable mydensity equal density
print "Density     : ${mydensity} g/cm^3"
print " "


# Output data format of the log file
thermo_style    custom step time etotal temp press pxx pyy pzz
# Output frequency of the log file
variable thermo_freq equal ${output_freq}/${sim_timestep}
thermo          ${thermo_freq}
thermo_modify lost ignore flush yes

variable doubleT  equal  ${high_temp}*2
velocity all create ${doubleT} ${random_seed} dist gaussian mom yes rot yes
if "${restrict_2D}" then &
 "velocity all set NULL NULL 0.0"

# Define a variable v_simtime, and set equal to simulation time for each atom
variable simtime atom time
# Define computes for the ke and pe of each atom
compute ke all ke/atom
compute pe all pe/atom


# Write lattice to output file, custom column format.
variable dump_freqsteps equal (v_dump_freq/${sim_timestep})
dump            6 all custom ${dump_freqsteps} dump*.dat.gz id element x y z v_simtime c_ke c_pe
# use LBOMD convention for atom names
#dump_modify     6 element C_

# ensure forces are zero in z if req'd
if "${restrict_2D}" then &
 "fix 5 all setforce NULL NULL 0.0"

# run equilibration simulation for defined no. of timesteps.
run		${num_timesteps}

print " "
print " >>>  Initial thermalisation at ${high_temp} K complete.  <<<"
print " "


#
# Quench system using damped MD
#
print " "
print "-----------------------------------------------"
print "  Quenching system using damped MD"
print "-----------------------------------------------"
print " "

variable num_timesteps equal  ${damped_md_time}/${sim_timestep}

print "Damped MD timesteps required = ${num_timesteps} "
print " "

# Delete existing NVT fix
unfix 1

# Quenching system using damped MD
fix 1 all nve
fix 2 all langevin 0 0 50 24680

# run quench simulation for computed no. of timesteps.
run  ${num_timesteps}


print " "
print " >>>  Damped MD finished  <<<"
print " "






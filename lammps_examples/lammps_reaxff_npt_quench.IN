# 
#          NPT quench simulation using the ReaxFF potential
#
#                     Kenny Jolley  April 2019

# 3 Simulation blocks:
#   - Initial NPT thermalisation of the system at high temperature 
#   - Quench of the system at the user given quench rate
#   - Relaxation of the system to zero K using a minimisation algorithm

# Requires:
#  ffield
#  lattice file with the mass defined

# -----------------------------------
#  Configurable variables
# -----------------------------------

variable input_file   string  'lammps.lattice.dat'    #  Input filename of the lattice

variable high_temp    equal   6000       #  Initial System temperature [K] 
variable init_eq_time equal    100.0     #  Initial Equilibration time [ps]

variable quenchrate   equal   1e13       #  System quench rate [K/s] 

variable final_temp   equal   10         #  Final System temperature [K] 


variable min_method   string  'cg'       #  The minimisation method, chose from: cg, htfn, sd, quickmin, fire
variable relax_box    equal    true      #  Allow box dimensions to change during relaxation?  (True/False)
variable force_tol    equal    1.0e-10   #  Minimiser stopping tolerance for force (force units)
variable max_iters    equal    9999999   #  Maximum no. steps of the minimiser before quitting

variable output_freq  equal    0.1       #  Output period of data in log files [ps]
variable dump_freq    equal    1.0       #  Output frequency of dump files containing atom coordinates [ps]


# Should NOT need to change these variables

variable sim_timestep equal     0.0005  #  Timestep to use in the MD simulations [ps]
variable random_seed  equal      52253  #  Seed of the random number generator

# -----------------------------------
#  Simulation commands
# -----------------------------------

#
# ReaxFF potential settings
#

dimension       3
boundary        p p p 
units           real

atom_style  charge
read_data       ${input_file}

# pair_style  reax/c NULL
# pair_coeff  * * ffield C

pair_style hybrid/overlay reax/c NULL  zbl 1.0 1.15
pair_coeff * * reax/c ffield C
pair_coeff * * zbl 6.0 6.0

neighbor       2. bin
neigh_modify   every 10 delay 0 check no
fix            99 all qeq/reax 1 0.0 10.0 1e-6 reax/c


#
# Initial NPT equilibration
#
print " "
print "-----------------------------------"
print "  Begin Initial NPT equilibration"
print "-----------------------------------"
print " "

print "Thermalising at ${high_temp} K"
print "Thermalisation time ${init_eq_time} ps"

# NPT fix
fix      1  all npt temp ${high_temp} ${high_temp} 50.0 aniso 0.0 0.0 500.0

# Set timestep
variable reaxff_sim_timestep equal (${sim_timestep}*1000.0)
timestep ${reaxff_sim_timestep}

variable num_timesteps equal  ${init_eq_time}/${sim_timestep}

print "Equilibration timesteps required = ${num_timesteps} "
print " "

# Output data format of the log file
thermo_style    custom step time etotal temp press lx ly lz vol density
# Output frequency of the log file
variable thermo_freq equal ${output_freq}/${sim_timestep}
thermo          ${thermo_freq}
thermo_modify lost ignore flush yes

variable doubleT  equal  ${high_temp}*2
velocity all create ${doubleT} ${random_seed} dist gaussian


# Define a variable v_simtime, and set equal to simulation time for each atom
variable simtime atom time
# Define computes for the ke and pe of each atom
compute ke all ke/atom
compute pe all pe/atom


# Write lattice to output file, custom column format.
variable dump_freqsteps equal (v_dump_freq/${sim_timestep})
dump            6 all custom ${dump_freqsteps} dump*.dat.gz id element x y z v_simtime c_ke c_pe
# use LBOMD convention for atom names
#dump_modify     6 element C_


# run equilibration simulation for defined no. of timesteps.
run		${num_timesteps}

print " "
print " >>>  Initial thermalisation at ${high_temp} K complete.  <<<"
print " "


#
# Quench system in NPT
#
print " "
print "-----------------------------------------------"
print "  Quenching system"
print "-----------------------------------------------"
print " "

print "Initial temperature: ${high_temp} K"
print "Quenchrate:  ${quenchrate} K/s"
print "Final temperature: ${final_temp} K"

variable quench_time equal  (${high_temp}-${final_temp})/${quenchrate}
variable quench_time_ps equal  (${quench_time}*1e12)
variable quench_time_ns equal  (${quench_time}*1e9)

print "Quench time: ${quench_time} s"
print "           : ${quench_time_ns} ns"
print "           : ${quench_time_ps} ps"

variable num_timesteps equal  ${quench_time_ps}/${sim_timestep}
print "Quenching timesteps required = ${num_timesteps} "
print " "

# Delete existing NPT fix
unfix 1

# Quenching NPT fix
fix      1  all npt temp ${high_temp} ${final_temp} 50.0 aniso 0.0 0.0 500.0


# run quench simulation for computed no. of timesteps.
run  ${num_timesteps}


print " "
print " >>>  Quench to ${final_temp} K complete.  <<<"
print " "


#
# Minimise final state to zero K
#
print " "
print "-----------------------------------------------"
print "  Minimise the final state to ZERO K"
print "-----------------------------------------------"
print " "

# Delete existing NPT fix
unfix 1

#
# Set the default NVE integrator 
#

fix		1 all nve

# Relax box?
if "${relax_box}" then &
 "fix 2 all box/relax aniso 0.0 vmax 0.001"

# Output data format of the log file
thermo_style    custom time step ke pe etotal temp press lx ly lz vol density fmax fnorm

min_style ${min_method}

##  Minimize
#minimize etol ftol maxiter maxeval
#
#    etol = stopping tolerance for energy (unitless)
#    ftol = stopping tolerance for force (force units)
#    maxiter = max iterations of minimizer
#    maxeval = max number of force/energy evaluations

minimize 0.0 ${force_tol} ${max_iters} 10000000000





#!/usr/bin/env python

# This function generates a random lattice of argon atoms.
# Output file is in lammps atomic format

# Keyword arguments:
# verbose = True     , prints some comments to the screen.
# forced  = True     , will overwrite the existing file (if it exists).
# forced  = False    , if file exists, will ask the user if the existing file should be overwritten.
# pressure = 101325  , the pressure in Pa
# temperature = 300  , the temperature in K
# num_atoms = 1000   , the number of argon atoms in the lattice
# filename = lammps.lattice.dat  , the output filename
# use_min_sep = True , Random placed atoms are checked such that they are not too close to others (defined by min_sep)
# min_sep = 1.0      , Minimum separation distance between atoms in random lattice (if used).


#    Kenny Jolley, Sept 2019

# imported modules
import sys
import os
import math
import random


# function generates a random lattice of carbon atoms, and saves the file to disk
def lammps_gen_random_lattice_Ar_atomic(**kwargs):
    # Default keyword args
    verbose = kwargs.get('verbose', False)
    forced = kwargs.get('forced', True)
    pressure = kwargs.get('pressure', 101325.0)
    num_atoms = kwargs.get('num_atoms', 1000)
    temperature = kwargs.get('temperature', 300)
    filename = kwargs.get('filename', 'lammps.lattice.dat')
    use_min_sep = kwargs.get('use_min_sep', True)
    min_sep = kwargs.get('min_sep', 1.0)
    min_sep2 = min_sep * min_sep

    # System Mass
    amu = 1.660538921E-27  # in kg
    argon_mass = 39.948
    total_mass = argon_mass * num_atoms * amu

    # moles
    Na = 6.02214086E+23
    moles = float(num_atoms) / Na

    # System volume
    volume_m3 = moles * 8.314 * temperature / pressure

    # density
    density = total_mass / volume_m3 / 1000.0

    # cube side length
    cube_size_m = math.pow(volume_m3, (1.0 / 3.0))
    cube_size_ang = cube_size_m * 1e10

    # Welcome
    if verbose:
        print("  +------------------------------------------+")
        print("  |         Lattice generator script         |")
        print("  |           Random Argon lattice           |")
        print("  |                                          |")
        print("  |               Kenny Jolley               |")
        print("  |                Sept 2019                 |")
        print("  |          kenny.jolley@gmail.com          |")
        print("  +------------------------------------------+")
        print("   ")
        print("  Generating a random distribution of Argon atoms")
        print("  Argon atoms : " + str(num_atoms))
        print("  Total mass  : " + str(total_mass) + " kg")
        print("  Density     : " + str(density) + " g/cm^3")
        print("  Pressure    : " + str(pressure) + " Pa")
        print("  Temperature : " + str(temperature) + " K")
        print("  Total Vol   : " + str(volume_m3) + " m^3")
        print("  Cube size   : " + str(cube_size_m) + " m")
        print("  Cube size   : " + str(cube_size_ang) + " Angstrom")
        print("  Writing file:  " + str(filename))
        print("   ")
        if use_min_sep:
            print("  Checking atoms are not placed within:  " + str(min_sep) + " Ang")
            print("  This is slow for large systems. ")
            print("   ")

    # Check if the file already exists
    gen_file = True
    if not forced:
        if os.path.isfile(filename):
            print("> Existing file " + str(filename) + " detected.")
            print("> lammps_gen_random_lattice_Ar_atomic function wants to overwrite this file")

            # Ask user if file should be overwritten
            user_choice = input('Do you wish to overwrite the existing file? (y/n): ')

            user_choice = user_choice.lower()

            if (user_choice == 'yes') or (user_choice == 'y') or (user_choice == 'yea'):
                print(" > Overwriting existing file ... ")
                gen_file = True
            else:
                print("File not overwritten, exiting function")
                gen_file = False

    # Generate file
    if gen_file:
        file = open(filename, 'w+')
        if verbose:
            print("  Opened file: " + str(file.name))

        # Write header info
        file.write("Lammps data file generated by lammps_gen_random_lattice_Ar_atomic\n")
        file.write("#   Random lattice with " + str(num_atoms) +
                   " argon atoms, at a density of " + str(density) + " g/cm^3\n")
        file.write(str(num_atoms) + " atoms\n\n")
        file.write("1 atom types # Ar\n\n")
        file.write("0.0 " + str(cube_size_ang) + " xlo xhi\n")
        file.write("0.0 " + str(cube_size_ang) + " ylo yhi\n")
        file.write("0.0 " + str(cube_size_ang) + " zlo zhi\n\n")
        file.write("Masses\n\n")
        file.write("1 " + str(argon_mass) + "\n\n")
        file.write("Atoms # atomic\n\n")

        # Create atom arrays
        atom_pos_x = [-1.0 for _ in range(num_atoms + 1)]
        atom_pos_y = [-1.0 for _ in range(num_atoms + 1)]
        atom_pos_z = [-1.0 for _ in range(num_atoms + 1)]

        # Generate first position
        atom_pos_x[0] = random.uniform(0, cube_size_ang)
        atom_pos_y[0] = random.uniform(0, cube_size_ang)
        atom_pos_z[0] = random.uniform(0, cube_size_ang)

        for i in range(1, num_atoms + 1):
            if verbose:
                if (100 * float(i)) % num_atoms == 0:
                    print(".", end='')
                    sys.stdout.flush()
                if (10 * float(i)) % num_atoms == 0:
                    print(str(100 * float(i) / num_atoms) + " %")

            # Generate position
            while True:
                # generate atom i
                atom_pos_x[i] = random.uniform(0, cube_size_ang)
                atom_pos_y[i] = random.uniform(0, cube_size_ang)
                atom_pos_z[i] = random.uniform(0, cube_size_ang)

                # check it is no closer than min_sep if required
                if use_min_sep:
                    sep_test = 1
                    # loop over all atoms
                    for j in range(0, i):
                        # x coord
                        # print i, j
                        dx = atom_pos_x[i] - atom_pos_x[j]
                        dx2 = abs(dx + cube_size_ang)
                        dx3 = abs(dx - cube_size_ang)
                        dx1 = abs(dx)
                        # min x-sep
                        dxm = min(dx1, dx2)
                        dxm = min(dxm, dx3)

                        # if within x dist, check other coords
                        if dxm < min_sep:
                            dy = atom_pos_y[i] - atom_pos_y[j]
                            dy2 = abs(dy + cube_size_ang)
                            dy3 = abs(dy - cube_size_ang)
                            dy1 = abs(dy)
                            # min y-sep
                            dym = min(dy1, dy2)
                            dym = min(dym, dy3)
                            # if within y dist, check other coords
                            if dym < min_sep:
                                dz = atom_pos_z[i] - atom_pos_z[j]
                                dz2 = abs(dz + cube_size_ang)
                                dz3 = abs(dz - cube_size_ang)
                                dz1 = abs(dz)
                                # min z-sep
                                dzm = min(dz1, dz2)
                                dzm = min(dzm, dz3)

                                # if within z dist, check other coords
                                if dzm < min_sep:
                                    # full calc
                                    dr2 = dxm * dxm + dym * dym + dzm * dzm
                                    if dr2 < min_sep2:
                                        # print("too close")
                                        sep_test = 0

                else:
                    break

                # break if passed min separation test
                if sep_test:
                    break

            # Output to file
            file.write(
                str(i) + "  1  " + str(atom_pos_x[i]) + "  " + str(atom_pos_y[i]) + "  " + str(atom_pos_z[i]) + "\n")


# If we are running this script interactively, call the function safely
if __name__ == '__main__':

    # Read number of atoms and density from the command-line, or supply interactively
    if len(sys.argv) > 1:
        print(">  Using information passed on the command-line")
        # 2 params = number of atoms and density
        if len(sys.argv) == 3:
            _num_atoms = int(sys.argv[1])
            _temperature = float(sys.argv[2])
        else:
            print(">>> ERROR  <<<")
            print("  User must pass 2 command-line arguments")
            print("   2 params = num_atoms (integer), temperature  (float) ")
            print("    examples")
            print("   lammps_gen_random_lattice_Ar_atomic.py 1000 300")
            print("   lammps_gen_random_lattice_Ar_atomic.py 5000 298")
            print("   lammps_gen_random_lattice_Ar_atomic.py 9000 500")
            sys.exit()
    else:
        # Otherwise, ask user for the number of atoms and density
        while True:
            try:
                _num_atoms = int(input('Enter number of atoms required : '))
                if _num_atoms > 0:
                    break
                else:
                    print("Oops!  Integer must be greater than 0.  Try again...")
            except ValueError:
                print("Oops!  That was not a valid integer.  Try again...")

        while True:
            try:
                _temperature = float(input('Enter the required temperature [K] : '))
                if _temperature > 0:
                    break
                else:
                    print("Oops!  temperature must be greater than 0.  Try again...")
            except ValueError:
                print("Oops!  That was not a valid number.  Try again...")

    # call the lattice generator function
    lammps_gen_random_lattice_Ar_atomic(verbose=True, num_atoms=_num_atoms, temperature=_temperature)
